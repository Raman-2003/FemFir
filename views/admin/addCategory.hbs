<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Category</title>
    <link href="https://unpkg.com/cropperjs/dist/cropper.min.css" rel="stylesheet"/>

    <style>
    .image-preview {
        display: flex;
        flex-wrap: wrap;
        margin-top: 10px;
    }
    .image-preview-item {
        position: relative;
        display: inline-block;
        margin: 5px;
    }
    .image-preview img {
        max-width: 130px;
        max-height: 150px;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 5px;
    }
    .delete-button {
        position: absolute;
        top: 0;
        right: 0;
        background: red;
        color: white;
        border: none;
        border-radius: 50%;
        width: 25px;
        height: 25px;
        cursor: pointer;
    }

    /* Style for the modal (cropper) */
    .modal {
        display: none;
        position: fixed;
        z-index: 1050;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
    }
    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 500px;
    }
    .cropper-container {
        height: 400px;
        width: 100%;
    }
    .cropper-view-box {
        border-radius: 4px;
    }
    .cropper-face {
        border-radius: 4px;
    }
    .btn-crop {
        margin-top: 10px;
        background: green;
        color: white;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
    }
    .btn-close {
        background: red;
        color: white;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
    }
    </style>
</head>
<body>

<div class="content-body">
    <div class="container-fluid">
        <h2>Add Category</h2>
        {{#if errorMessage}}
        <div class="alert alert-danger" role="alert">
            {{errorMessage}} 
        </div>
        {{/if}}
        <form action="/admin/categories/add" method="POST" enctype="multipart/form-data">
            <div class="form-group">
                <label for="name">Name</label>
                <input type="text" name="name" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="description">Description</label>
                <textarea name="description" class="form-control"></textarea>
            </div>
            <div class="form-group">
                <label for="mainImage">Image</label>
                <input type="file" id="mainImage" name="mainImage" class="form-control" required>
                <div id="mainImagePreview" class="image-preview"></div>
            </div>
            <button type="submit" class="btn btn-primary">Add Category</button>
        </form>
    </div>
</div>

<!-- Modal for Cropping -->
<div id="cropModal" class="modal">
    <div class="modal-content">
        <div class="cropper-container">
            <img id="imageToCrop" src="" alt="Image for cropping">
        </div>
        <button class="btn-crop" id="cropButton">Crop</button>
        <button class="btn-close" onclick="closeCropModal()">Cancel</button>
    </div>
</div>

<script src="https://unpkg.com/cropperjs"></script>
<script>
    let cropper;

    function showCropModal(imageSrc, callback) {
        const cropModal = document.getElementById('cropModal');
        const imageToCrop = document.getElementById('imageToCrop');
        imageToCrop.src = imageSrc;
        cropModal.style.display = 'block';

        if (cropper) {
            cropper.destroy();
        }

        cropper = new Cropper(imageToCrop, {
            aspectRatio: NaN,
            viewMode: 1,
            movable: true,
            cropBoxResizable: true,
            autoCropArea: 1,
            ready() {
                document.getElementById('cropButton').onclick = function () {
                    const canvas = cropper.getCroppedCanvas();
                    canvas.toBlob((blob) => {
                        const croppedImageUrl = URL.createObjectURL(blob);
                        callback(croppedImageUrl, blob);
                        cropper.destroy();
                        cropModal.style.display = 'none';
                    });
                };
            }
        });
    }

    function closeCropModal() {
        document.getElementById('cropModal').style.display = 'none';
        if (cropper) {
            cropper.destroy();
        }
    }

    document.getElementById('mainImage').addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                // Show the cropping modal with the loaded image
                showCropModal(e.target.result, (croppedImageUrl, blob) => {
                    const mainImagePreview = document.getElementById('mainImagePreview');
                    mainImagePreview.innerHTML = ''; // Clear previous previews

                    const imgContainer = document.createElement('div');
                    imgContainer.className = 'image-preview-item';
                    
                    const img = document.createElement('img');
                    img.src = croppedImageUrl; // Use the cropped image URL

                    const deleteButton = document.createElement('button');
                    deleteButton.className = 'delete-button';
                    deleteButton.innerHTML = '&times;';
                    deleteButton.addEventListener('click', function() {
                        mainImagePreview.innerHTML = ''; // Remove the preview
                        document.getElementById('mainImage').value = ''; // Clear the file input
                    });

                    imgContainer.appendChild(img);
                    imgContainer.appendChild(deleteButton);
                    mainImagePreview.appendChild(imgContainer);
                });
            }
            reader.readAsDataURL(file);
        }
    });
</script>

</body>
</html>
